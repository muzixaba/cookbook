#===========
# Background
#===========

- Git is a version control system
- Developed by Linus Trovalds to help with the development of Linux

A git repo contains the following:
- Files managed by git
- History of everything since tracking with git
- hidden .git folder


#===========
# Setting Up
#===========

# Setting up you credentials
git config --global user.name "Name"
git config --global user.email "your@email.com"

# Change your default git editor
git config --global core.editor nano/code

# Setting up p4merge (perforce.com, install p4merge - visual merge tool only)
- Set as difftool (comparing)
git config --global diff.tool p4merge
git config --global difftool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
git config --global difftool.prompt false
- Set as merge tool (graphical)
git config --global merge.tool p4merge
git config --global mergetool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
git config --global mergetool.prompt false

# Open git's config file
git config --global -e
git config --global --list

# chache login credentials
git config --global credential.helper cache

# clear credentials cache, if token changed
git config --global --unset credential.helper

# How to avoid tracking certain files
Use .gitignore file

# Check git version
git version


#===============
# Authentication
#===============
Can use either HTTPS or SSH with GitHub

# Creating an SSH Key
cd ~/.ssh
ssh-keygen -o -t rsa -C "name@email.com"
If prompted for a passphrase, enter one or skip.
NOTE: 
2 files get generated. id_rsa (secret key), id_rsa.pub (public key)
Copy the entire public key, up to your email & add it in your GitHub settings

# Log on to GitHub using SSH on the command line
ssh -T git@github.com
Will be prompted to enter passphrase
NOTE: You can now use the SSH link to clone repos

#====================
# GitHub Deploy Keys
#====================
1. Generate SSH Key Pair

ssh-keygen -t rsa -b 4096 -C "your-email@example.com" -f ~/.ssh/deploy_key
- Creates private key: deploy_key
- Creates public key: deploy_key.pub

2. Add Public Key to GitHub Repository

  1. Go to your GitHub repository
  2. Click Settings → Deploy keys
  3. Click Add deploy key
  4. Paste contents of deploy_key.pub
  5. Give it a descriptive title
  6. Check Allow write access if needed
  7. Click Add key

3. Store Private Key Securely in AWS SSM Parameter Store

aws ssm put-parameter \
  --name "/project-name/github-deploy-key" \
  --value "$(cat ~/.ssh/deploy_key)" \
  --type "SecureString"


4. Configure SSH Client

Create SSH config to use the deploy key:
# ~/.ssh/config
Host github.com
    HostName github.com
    User git
    IdentityFile /path/to/deploy_key
    StrictHostKeyChecking no

5. Set Proper Permissions

chmod 600 /path/to/deploy_key
chown user:user /path/to/deploy_key

6. Test Connection

ssh -T git@github.com


#==========
# Using Git
#==========

# Create repo locally
git init -b main -> Must done inside your src directory.
Create new repo on GitHub. Let's call it NewRepo
git remote add origin https://github.com/username/newrepo.git
git push -u origin master -> First push to GitHub. -u (sets Upstream) enables tracking btw repos

# Check which remote repo is linked to your local one
git remote -v (v==verbose, shows remote repo references)

# Changing the remote url
git remote set-url origin https://new_url

# Removing the .git folder.
# If u created it in a wrong folder
rm -rf .git

# Get exisiting code from GitHub
git clone https://github.com/...

# Clone to a new folder
git clone https://github.com/... folder_name

# Check which files are being tracked
git ls-files 

# Check for modifications
git status

# Check git logs
git log -> Returns the commit times, authors, & SHA values of your previous commits
git log --oneline --graph -> Displays a simple log with a branch graph
git log --stat -> shows commit message, files that were changed in log format
git log --patch -> shows the diff of all commits
git log --patch -2 -> shows the diff of last 2 commits
git reflog -> Shows all the actions taken inside a repo
git show -> Returns the commits, plus the changes that were made. PRESS q to quit

# Undersanding git's 3 local states
1. Working directory -> Your working files
2. Staging area -> Used prepare for the next commit
3. Repository (.git folder) -> All commited changes
After commiting file, they are sent to the remote repo

# Add files to track (stage files)
git add file/folder -> adds specific file or folder to staging area
git add . -> adds all files to the staging area
git add -p file.ext -> add certain changes from inside the file (step through changes [y/n])

# Unstage file(s)
git restore --staged path/to/file.ext
git restore --staged . (Unstages all files)


# Commit changes
git commit (opens text editor so you can type commit subject and description)
git commit -m "message about what what was done"
git commit -m "Commit title" -m "commit description message"

# Add to staging area & commit in one line
git commit -am "commit message"

# Use rebase
# Used whenever you want to add changes of a base branch back to a branched out branch
# Moves or combines a sequence of commits to a new base commit.
git rebase <base>


# How to unstage file
git reset HEAD file_name
git rm --cached file_name

# See all recent changes
git log

# Simplified view of git log
git log --oneline --graph --decorate --all

# Create git alias
# alias == hist, leave out preceding git when writing command
# alias="git log --all --decorate --oneline --graph"
git config --global alias.hist "log --oneline --graph --decorate --all"



#=====================
# Git File Commands
#=====================

# Revert back changes to last commit
git checkout -- file_name

# Rename a file using git
git mv old_name.txt new_name.txt

# If rename & delete happened outside of git
git add -A

# Delete file using git 
git rm file_name.ext

# If deletion happened outside of git
git add -u

# See differences btw 2 commits
git diff [commit ID] [commit ID]/HEAD

# See changes in the same file
git diff file_name.ext

# Reverse local commits
git restore --staged <path/to/file.ext>

# Reverse last change that was pushed to main (Reverts by adding a new commit the reverses the changes made by the old one) - Good for shared branches
git revert HEAD > Edit revert commit title > commit & push

# Deleting a pushed commit (Good for private branches)
git reset HEAD~1
git push --force origin main

# Reverting a Pull Request
Go to the PR on GitHub
Click on 'Revert' -> GitHub will create a new branch that undoes the old commit

#=============
# Tags
#=============
Lightweight Tags
git tag tag_name -> Places a tag on current commit with no additional info
git push --tags -> Pushes all tags to remote
git push origin :tag_name -> Deletes a specific tag on remote

Annotated Tags
git tag -a tag_name -m "commit message"

List Tags
git tag --list

# Delete a tag
git tag -d tag_name


#=============
# Branching
#=============

What is a branch?
It's a timeline of commits
Points to a specific commit
Branch names are labels
Deletion removes label only

# Check which branches exist, highlights the one you're in
git branch

# Create a branch
git branch branch_name

# Create a new branch & switch to it
git checkout -b branch_name

# Switch to existing branch
NOTE: Git 1st searches for the branch locally, then remotely
git checkout branch_name

# Switch to a different branch
git checkout branch_name

# Switch to previous branch
git checkout -

# Delete branch
git branch -d branch_name
git push origin --delete branch_name (deletes remote branch)

# Push Branch to remote
git push <remote_name> <branch_name>

# Show branch(es)
git branch --show-current
git branch -a
git branch --list
git branch -r (shows all remote branches)

# Merge branch_name into active branch
git merge branch_name

# See which branches have been merged with main
git checkout main
git branch --merged

# See which branches have NOT been merged with main
git checkout main
git branch --no-merged

# Merge branch_name into active branch (combine all feature_branch commits into 1)
git merge --squash feature_branch

# Fix merge conflicts
All code above the ‘=========’ comes from you current branch (master).
All code below the ‘=========’ is from the incoming branch (second_branch)
Only the line(s) that has conflicting code/info will be highlighted.
You now have to decide whether to pick the code from current or incoming branch or a some combination.
Add & Commit changes once conflict has been fixed

Types of Merges
---------------

Fast Forward Merge
- Happens when no additional work has been detected on the master branch.
- Git simply adds all commits from the feature branch on to the master
  as if we never branched off.

Automatic Merge
- Happens when git detects non-conflicting changes in the master branch.
- Git preserves both timelines
- A Merge Commit is created where the two branches meet

Manual Merge
- Happens when git is unable to resolve any conflicts
- An automatic merge is not possible
- Git enters the Conflict Merge State which means all conflicts must be
  resolved before trying to merge.
- Once conflicts are resolved, those changes are saved as a Manual Merge Commit.

NOTE: You have to switch back to master branch first, then merge


Special Markers
---------------
HEAD
- Points to the last commit of the current branch


# Create a Pull Request (Merge Request)
Alerts a repo's owner that you want to make some changes.
Based on branches, not individual commits
Pull request is the same as Merge Request
STEPS:
1: Fork the owner's repo in you own account. Basically making a copy
2: Clone the forked repo locally to make changes
3: Make the changes
4: Add, commit, & push the changes up to GitHub
5: Send pull request to repo owner

# Pull from GitHub
git pull origin master

# Switch back to master branch
git checkout master

# Saving temporal changes using Stashing
git stash save "message" -> Creates saves the current changes & goes back to last commit
git stash save StashName -> Gives the stash a name
git stash push -m "message" path/to/file.ext -> Stash changes made to specific file
git stash list -> Lists out all stashes
git stash pop -> Applies changes on top stash & deletes it
git stash apply stash@{#} -> applies a certain stash & preserves the stash
git stash pop stash@{#} -> applies a certain stash and deletes the stash
git stash branch <branch-name> <stash-index> -> Creates a new branch and adds the stashed changes to it.
git stash clear -> deletes all stashes
git stash drop <stash_id> -> delete a specific stash
git stash show -> see changes made in recent stash
git stash show{1} -> view contents of specific index
git stash show -p stash@{0} -> show stash changes in diff format

# Squashing commits
git squash ?????

Time traveling using reset
git reset [commit ID] flag -> Flags incl "soft", "hard", "mixed"
 soft -> Changes the commit ID that head point to
 hard -> Most destructive. Deletes your changes
 mixed-> The default type of reset

 #======================
 # Making changes safely
 #======================
 Pull updates down to your local repo
 Create new branch that will house your changes (git checkout -b new_branch_name)
 Make your changes on the new branch
 Add, commit changes to new branch
 git push --set-upstream origin new_branch_name (will push to repo & create pull request for new branch)
 alternatively (git push -u origin new_branch_name)


 #===================
 # Fetching & Pulling
 #===================
 git fetch -> Fetches your remote repo. Updates your references. Non destructive way to check for differences btw local & remote repos
 git merge branch_name -> Merges branch_name into active branch
 git pull -> (git fetch && git merge) Fetches your remote repo & merges with local
 git pull --all -> Git pulls all branches
 git pull --rebase -> Rewinds local changes, pulls remote, than commits local
 git pull origin master --allow-unrelated-histories
 NOTE: It's recommended to do a pull before pushing up your changes 


 #===========================================
 # Updating a Fork using local Repo as Bridge
 #===========================================
 git remote add upstream upstream_url
 git pull upstream master -> Pulls 4rm upstream to local
 git push origin master -> Pushes from local to fork

#=============================
# Pull directly from upstream
#=============================
git branch --set-upstream-to=upstream/master master ???????????????????


 # Close Issue using Commit
 #==========================
 git commit -m "Solved the issue, close #3" -> 3 is the issue number on GitHub
 NOTE: 
 - A 'Contributor' submits pull requests to update the code.
 - A 'Collaborator' has read & write access & updates the code directly
      
#===================
# Removing a remote
#===================
git remote rm remote_name


#=========================
# Changing A repo's name
#=========================
Go to repo settings, find & change repo name
git remote set-url origin new_url

#========================
# Delete a Local Git Repo
#========================
rm -fr .git


#=====================
# Updating Git (Ubuntu)
#======================
sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
sudo apt-get install git
